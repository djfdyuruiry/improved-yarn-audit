#! /usr/bin/env node
const { spawn } = require("child_process")
const { randomBytes } = require("crypto")
const {
  existsSync,
  createReadStream,
  createWriteStream,
  mkdtempSync,
  readFileSync,
  rmdirSync,
  statSync,
  unlinkSync
} = require("fs")
const { tmpdir } = require("os")
const path = require("path")
const { createInterface } = require("readline")

const joinPath = path.join

const packageInfo = require(joinPath(__dirname, "..", "package.json"));

const optionFlags = {
  severity: ["--min-severity", "-s"],
  exclude: ["--exclude", "-e"],
  retryNetworkIssues: ["--retry-on-network-failure", "-r"],
  ignoreDevDependencies: ["--ignore-dev-deps", "-i"],
  failOnMissingExclusions: ["--fail-on-missing-exclusions", "-f"],
  debug: ["--debug", "-d"],
  version: ["--version", "-v"],
  help: ["--help", "-h"]
}

const severityToIntMap = {
  info: 0,
  low: 1,
  moderate: 2,
  high: 3,
  critical: 4
}

const maxSeverityNameLength = 8

const exclusionsFileName = ".iyarc"

let minSeverityName = "low"
let minSeverity = severityToIntMap[minSeverityName]
let excludedAdvisories = []
let ignoreDevDependencies = false
let failOnMissingAdvisoryExclusions = false
let debugEnabled = false
let shouldRetryNetworkErrors = false
let auditResultsFilePath = "/dev/null"

function severityShouldBeIgnored(severity) {
  return severityToIntMap[severity] < minSeverity
}

function flatMap (arr, callback) {
  let arrays = arr
  let returnArray = []

  if (typeof callback === "function") {
    arrays = arr.map(callback)
  }

  arrays.forEach(a => a.forEach(i => returnArray.push(i)))

  return returnArray
}

function logDebug(str) {
  if (debugEnabled) {
    console.log(`DEBUG: ${str}`)
  }
}

function checkForMissingExclusions(allAdvisories) {
  const missingExcludedAdvisories = excludedAdvisories.filter(ea =>
    allAdvisories.find(a => a.id === ea) === undefined
  )

  if (missingExcludedAdvisories.length < 1) {
    logDebug("No missing advisory exclusions found")

    return
  }

  console.log()

  console.log("WARNING: One or more excluded audit advisories were missing from yarn audit output: "
    +`${missingExcludedAdvisories.join(",")}`)

  if (failOnMissingAdvisoryExclusions) {
    console.error(`ERROR: ${optionFlags.failOnMissingExclusions.join("/")} was specified, `
      + "exit code will indicate number of missing exclusions")
    process.exit(missingExcludedAdvisories.length)
  }
}

function buildAdvisoryReport(
  devDependencyAdvisoryIds,
  severityIgnoredAuditAdvisories,
  excludedAuditAdvisories
) {
  let filteredAdvisoryReport = ""

  if (ignoreDevDependencies && devDependencyAdvisoryIds.length > 0) {
    filteredAdvisoryReport +=
      `\n${devDependencyAdvisoryIds.length} ignored because ` +
      `they are dev dependencies\n`
  }

  if (severityIgnoredAuditAdvisories.length > 0) {
    filteredAdvisoryReport +=
      `\n${severityIgnoredAuditAdvisories.length} ignored because ` +
      `severity was lower than "${minSeverityName}"\n`
  }

  if (excludedAuditAdvisories.length > 0) {
    filteredAdvisoryReport +=
      `\n${excludedAuditAdvisories.length} ignored because of advisory exclusions\n`
  }

  return filteredAdvisoryReport
}

function printAuditReport(
  filteredAuditAdvisories,
  devDependencyAdvisories,
  devDependencyAdvisoryIds,
  severityIgnoredAuditAdvisories,
  excludedAuditAdvisories
) {
  logDebug(`Dev audit advisories:\n${toJson(devDependencyAdvisories)}\n`)
  logDebug(`Excluded audit advisories:\n${toJson(excludedAuditAdvisories)}\n`)
  logDebug(`Severity ignored advisories:\n${toJson(severityIgnoredAuditAdvisories)}\n`)

  const filteredAdvisoryReport = buildAdvisoryReport(
    devDependencyAdvisoryIds,
    severityIgnoredAuditAdvisories,
    excludedAuditAdvisories
  )

  console.log(`Found ${filteredAuditAdvisories.length} vulnerabilities\n${filteredAdvisoryReport}`)

  filteredAuditAdvisories.forEach(a => {
    const formattedSeverity = a.severity.toUpperCase().padEnd(maxSeverityNameLength, " ")

    console.log(`Vulnerability Found: ${formattedSeverity} - ${a.url}`)
  })

  if (filteredAuditAdvisories.length > 0) {
    console.log()
  }

  console.log("Run `yarn audit` for more information")
}

const sleep = (ms) => new Promise(r => setTimeout(r, ms))

function isNonExcludedAdvisory(advisory, devDependencyAdvisoryIds) {
  return (
    !severityShouldBeIgnored(advisory.severity)
    && !excludedAdvisories.includes(advisory.id)
  )
  &&
  (
    !devDependencyAdvisoryIds.includes(advisory.id)
    || !ignoreDevDependencies
  )
}

function parseAuditJson(jsonString) {
  try {
    return JSON.parse(jsonString)
  } catch(ex) {
    console.error(`ERROR: Unable to parse yarn audit output: ${ex}`)
    console.error("Try running `yarn audit` for more info")

    process.exit(1)
  }
}

async function getAuditSummary() {
  logDebug("Getting yarn audit summary")

  let auditSummary = ""

  await iterateOverAuditResults(l => auditSummary = l)

  return auditSummary
}

async function handleAuditNetworkError(output) {
  const error = "ERROR: Network error occurred when querying audit registry"

  if (!shouldRetryNetworkErrors) {
    errorAndExit(`${error}\n\n${output}`)
  }

  console.error(`${error}, retrying...\n`)

  await sleep(1000)

  return await runYarnAudit()
}

async function dumpAuditResultsAsString() {
  let output = ""

  await iterateOverAuditResults(l => output += l)

  return output
}

async function iterateOverAuditResults(action) {
  logDebug("Iterating over audit results")

  const auditResultsFileStream = getAuditResultsFileStream("r")
  const iterator = createInterface(auditResultsFileStream)

  iterator.on("line", action)

  await new Promise(resolve => iterator.on("close", resolve))
}

function getAuditResultsFileStream(mode) {
  logDebug(`Opening file stream for file '${auditResultsFilePath}' in '${mode}' mode`)

  if (mode === "w") {
    return createWriteStream(auditResultsFilePath)
  }

  return createReadStream(auditResultsFilePath)
}

function cleanupAuditResultsFile() {
  if (existsSync(auditResultsFilePath)) {
    unlinkSync(auditResultsFilePath)
  }
}

async function invokeYarnAudit() {
  const auditParams = ["audit", "--json", `--level=${minSeverityName}`];

  if(ignoreDevDependencies) {
    auditParams.push("--groups=dependencies")
  }

  cleanupAuditResultsFile()

  const auditResultsFileStream = getAuditResultsFileStream("w")
  const yarnProcess = spawn("yarn", auditParams)

  yarnProcess.stdout.pipe(auditResultsFileStream)
  yarnProcess.stderr.pipe(auditResultsFileStream)

  let exitCode = await new Promise((resolve, reject) =>
    yarnProcess.on("exit", resolve)
      .on("error", reject)
  )

  auditResultsFileStream.close()

  if (debugEnabled) {
    const outputStats = statSync(auditResultsFilePath)

    logDebug(`Yarn audit output size: ${outputStats.size} bytes`)
  }

  return exitCode
}

async function runYarnAudit() {
  console.log("Running yarn audit...\n")

  const exitCode = await invokeYarnAudit()

  let networkErrorHasOccurred = false

  if (existsSync(auditResultsFilePath)) {    
    await iterateOverAuditResults(a => 
      networkErrorHasOccurred = a.includes("Error: Request failed ")
    )
  }

  logDebug(`networkErrorHasOccurred: ${networkErrorHasOccurred}`)

  if (networkErrorHasOccurred) {
    return await handleAuditNetworkError()
  }

  if (exitCode === 1) {
    errorAndExit(`ERROR: Yarn audit error:\n${await dumpAuditResultsAsString()}`)
  }
}

function getDevDependenciesRegex() {
  if (!existsSync("package.json")) {
    console.log("WARNING: No package.json was found in the current working directory")
    logDebug("Dev dependencies will not be ignored")

    return
  }

  const packageJson = readFileSync("package.json")
  const package = JSON.parse(packageJson)

  let devDependencies = []

  if (typeof package === "object" && typeof package.devDependencies === "object") {
    devDependencies = Object.keys(package.devDependencies)
  }

  if (devDependencies.length < 1) {
    logDebug("No dev dependencies installed")
    logDebug("Dev dependencies will not be ignored")

    return
  }

  const devDependenciesCsv = devDependencies.join(", ")

  logDebug(`Dev dependencies: ${devDependenciesCsv}`)

  ignoreDevDependencies
    ? logDebug("Dev dependencies will be ignored")
    : logDebug("Dev dependencies will not be ignored") 

  const devDependenciesOr = devDependencies.map(d => `(${d})`).join("|")
  const devDependenciesRegex = `^${devDependenciesOr}>*.*$`

  logDebug(`Dev dependencies regex: ${devDependenciesRegex}`)

  return new RegExp(devDependenciesRegex)
}

async function runAuditReport() {
  const devDependenciesRegex = getDevDependenciesRegex()

  await runYarnAudit()

  if (debugEnabled) {
    logDebug(`Audit summary:\n${await getAuditSummary()}\n`)
  }

  const allAdvisories = [];
  const filteredAuditAdvisories = []
  const severityIgnoredAuditAdvisories = []
  const excludedAuditAdvisories = []

  let devDependencyAdvisories = []
  let devDependencyAdvisoryIds = []

  await iterateOverAuditResults(resultJson => {
    const potentialResult = parseAuditJson(resultJson)
  
    if (
      typeof potentialResult.type !== "string"
      || potentialResult.type !== "auditAdvisory"
    ) {
      return
    }

    const result = potentialResult.data.advisory

    allAdvisories.push(result)

    if (devDependenciesRegex) {
      const isDevDependencyAdvisory = flatMap(result.findings, f => f.paths)
        .every(d => d.match(devDependenciesRegex))

      if (isDevDependencyAdvisory) {
        devDependencyAdvisories = devDependencyAdvisories.concat(result)
        devDependencyAdvisoryIds = devDependencyAdvisories.concat(
          devDependencyAdvisories.map(d => d.id)
        )
      }
    }

    if (isNonExcludedAdvisory(result, devDependencyAdvisoryIds)) {
      filteredAuditAdvisories.push(result)
    }

    if (
      excludedAdvisories.includes(result.id) 
      && !severityShouldBeIgnored(result.severity)
    ) {
      excludedAuditAdvisories.push(result)
    }

    if (severityShouldBeIgnored(result.severity)) {
      severityIgnoredAuditAdvisories.push(result)
    }
  })

  printAuditReport(
    filteredAuditAdvisories,
    devDependencyAdvisories,
    devDependencyAdvisoryIds,
    severityIgnoredAuditAdvisories,
    excludedAuditAdvisories
  )

  checkForMissingExclusions(allAdvisories)

  return filteredAuditAdvisories.length 
}

async function withTempDir(action, cleanupAction) {
  const prefix = joinPath(tmpdir(), "iya")
  const tempDirPath = mkdtempSync(prefix)

  try {
		return await action(tempDirPath)
	} finally {
    cleanupAction()

		rmdirSync(
      tempDirPath,
      { recursive: true }
    )
	}
}

function withTempFile(action, cleanupAction) {
  return withTempDir(tempDirPath => {
    const randomName = randomBytes(16).toString("hex")
    const tmpFilePath = joinPath(tempDirPath, randomName)

    return action(tmpFilePath)
  }, cleanupAction)
}

function toJson(value) {
  return JSON.stringify(value, null, 2)
}

function printVersionAndExit() {
  errorAndExit(packageInfo.version)
}

function printUsageAndExit() {
  errorAndExit(`
improved-yarn-audit [OPTIONS]

Options:

  --min-severity, -s                  Minimum severity to treat as an error, default is low (info, low, moderate, high, critical)
  --exclude, -e                       CSV list of advisory ID's to ignore, e.x. 432,564 (this overrides .iyarc)
  --retry-on-network-failure, -r      Retry audit if NPM registry throws a network error
  --ignore-dev-deps, -i               Ignore advisories for dev dependencies
  --fail-on-missing-exclusions, -f    Return a non-zero exit code when advisory exclusions are no longer detected by yarn audit
  --debug, -d                         Print out raw audit report's and advisory details
  --version, -v                       Print version info and exit
  --help, -h                          Show this information

The CSV list of advisory ID's can also be provided in a '.iyarc' file in the current working directory. This file also supports
comments, lines beginning with a '#' character are ignored.
`)
}

function errorAndExit(msg) {
  console.error(msg)
  process.exit(1)
}

function isNumbersCsv(str) {
  return str.trim()
    .replace(/\s/g, "")    // filter out spaces
    .match(/^(,|\d)*\d$/)  // number csv regex (without spaces)
}

function isNullOrEmpty(str) {
  return typeof str !== "string" || str.trim() === ""
}

function loadExclusionsFromFileIfPresent() {
  if (!existsSync(exclusionsFileName)) {
    logDebug(`No ${exclusionsFileName} found in working directory`)
    return
  }

  if (excludedAdvisories.length > 0) {
    console.log(`WARNING: Ignoring ${exclusionsFileName} as exclusions were passed in via command line`)
    return
  }

  let advisoriesCsv = readFileSync(exclusionsFileName)
    .toString()
    .replace(/^\s*#.*$/mg, "") // ignore comment lines, if present

  logDebug(`.iyarc contents (excluding comments): ${advisoriesCsv}`)

  if (!isNumbersCsv(advisoriesCsv)) {
    errorAndExit(`ERROR: ${exclusionsFileName} is not in the correct format, excluded advisories must be provided as ` +
      "a CSV list, for example: '2341,21,43'")
  }

  console.log(`Reading excluded advisories from ${exclusionsFileName}`)

  excludedAdvisories = JSON.parse(`[${advisoriesCsv}]`)
}

function isFlag(flags, ...strings) {
  return strings.filter(s =>
    !isNullOrEmpty(s) && flags.includes(s.trim().toLowerCase())
  ).length > 0
}

function parseCommandLineArgs() {
  process.argv.reduce((a, b) => {
    if (isFlag(optionFlags.version, a, b)) {
      printVersionAndExit()
    }

    if (isFlag(optionFlags.help, a, b)) {
      printUsageAndExit()
    }

    if (isFlag(optionFlags.exclude, a) && !isNullOrEmpty(b)) {
      if (isNumbersCsv(b)) {
        excludedAdvisories = JSON.parse(`[${b}]`)
      } else {
        errorAndExit(`ERROR: Unable to parse --exclude option value: ${b}`)
      }
    }

    if (isFlag(optionFlags.severity, a) && !isNullOrEmpty(b)) {
      if (![null, undefined].includes(severityToIntMap[b.toLowerCase()])) {
        minSeverityName = b.trim().toLowerCase()
        minSeverity = severityToIntMap[minSeverityName]
      } else {
        errorAndExit(`ERROR: Unrecognised --min-severity option value: ${b.trim()}`)
      }
    }

    if (isFlag(optionFlags.debug, a, b)) {
      debugEnabled = true
    }

    if (isFlag(optionFlags.retryNetworkIssues, a, b)) {  
      shouldRetryNetworkErrors = true
    } 
  
    if (isFlag(optionFlags.ignoreDevDependencies, a, b)) {
      ignoreDevDependencies = true
    }
  
    if (isFlag(optionFlags.failOnMissingExclusions, a, b)) {
      failOnMissingAdvisoryExclusions = true
    }

    return b
  }, "")
}

async function main() {
  parseCommandLineArgs()

  console.log(`Improved Yarn Audit - v${packageInfo.version}`)
  console.log()

  logDebug(`shouldRetryNetworkErrors = ${shouldRetryNetworkErrors}`)
  logDebug(`ignoreDevDependencies = ${ignoreDevDependencies}`)

  loadExclusionsFromFileIfPresent()

  console.log(`Minimum severity level to report: ${minSeverityName}`)

  console.log(
    excludedAdvisories.length > 0 ?
      `Excluded Advisories: ${JSON.stringify(excludedAdvisories)}\n` :
      ""
  )

  let advisoryCount = await withTempFile(filePath => {
    auditResultsFilePath = filePath

    logDebug(`Temporary file path: ${auditResultsFilePath}`)

    return runAuditReport()
  }, cleanupAuditResultsFile)

  process.exit(advisoryCount)
}

main()
